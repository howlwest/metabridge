import express from "express";
import axios from "axios";
import cors from "cors";
import dotenv from "dotenv";
dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 3000;
const GRAPH_VERSION = process.env.META_GRAPH_VERSION || "v23.0";
const META_TOKEN = process.env.META_SYSTEM_USER_TOKEN;   // token del System User
const AD_ACCOUNT_ID = process.env.META_AD_ACCOUNT_ID;    // ej: act_123456789012345

const BASE = (path) => `https://graph.facebook.com/${GRAPH_VERSION}/${path}`;

app.get("/health", (req, res) => res.json({ ok: true, version: GRAPH_VERSION }));

// 1) Insights
app.post("/insights", async (req, res) => {
  try {
    const { level = "ad", since, until, time_increment = "1", breakdowns, fields } = req.body || {};
    const url = BASE(`${AD_ACCOUNT_ID}/insights`);
    const params = {
      level,
      time_range: JSON.stringify({ since, until }),
      time_increment,
      fields: fields || "date_start,ad_id,adset_id,campaign_id,spend,clicks,ctr,cpm,actions,action_values,roas",
    };
    if (breakdowns) params.breakdowns = breakdowns;
    const { data } = await axios.get(url, { params, headers: { Authorization: `Bearer ${META_TOKEN}` } });
    res.json(data);
  } catch (e) {
    res.status(400).json({ error: e?.response?.data || e.message });
  }
});

// 2) Cambiar presupuesto de un ad set (EUR → céntimos)
app.post("/adset_budget", async (req, res) => {
  try {
    const { adset_id, daily_budget_eur } = req.body || {};
    if (!adset_id || !daily_budget_eur) return res.status(400).json({ error: "adset_id y daily_budget_eur son requeridos" });
    const url = BASE(`${adset_id}`);
    const params = { daily_budget: Math.round(Number(daily_budget_eur) * 100) };
    const { data } = await axios.post(url, null, { params, headers: { Authorization: `Bearer ${META_TOKEN}` } });
    res.json({ updated: true, meta: data });
  } catch (e) {
    res.status(400).json({ error: e?.response?.data || e.message });
  }
});

// 3) Cambiar estado de un anuncio
app.post("/ad_status", async (req, res) => {
  try {
    const { ad_id, status } = req.body || {};
    if (!ad_id || !status) return res.status(400).json({ error: "ad_id y status son requeridos" });
    const url = BASE(`${ad_id}`);
    const params = { status };
    const { data } = await axios.post(url, null, { params, headers: { Authorization: `Bearer ${META_TOKEN}` } });
    res.json({ updated: true, meta: data });
  } catch (e) {
    res.status(400).json({ error: e?.response?.data || e.message });
  }
});

app.listen(PORT, () => console.log(`Bridge running on :${PORT}`));
